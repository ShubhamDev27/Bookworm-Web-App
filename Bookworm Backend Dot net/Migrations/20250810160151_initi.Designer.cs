// <auto-generated />
using System;
using Bookworm.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bookworm.Migrations
{
    [DbContext(typeof(BookwormDbContext))]
    [Migration("20250810160151_initi")]
    partial class initi
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Bookworm.Models.BeneficiaryMaster", b =>
                {
                    b.Property<int>("BenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ben_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BenId"));

                    b.Property<string>("BenEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ben_email");

                    b.Property<string>("BenName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ben_name");

                    b.Property<string>("BenPan")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ben_pan");

                    b.HasKey("BenId");

                    b.HasIndex("BenEmail")
                        .IsUnique();

                    b.HasIndex("BenPan")
                        .IsUnique();

                    b.ToTable("beneficiary_master");
                });

            modelBuilder.Entity("Bookworm.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("cost");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("cart_master");
                });

            modelBuilder.Entity("Bookworm.Models.CartDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cart_details_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    b.Property<bool>("IsRented")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_rented");

                    b.Property<bool?>("IsUpdated")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_updated");

                    b.Property<decimal>("OfferCost")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("offer_cost");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("RentNumberOfDays")
                        .HasColumnType("int")
                        .HasColumnName("rent_no_of_days");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("cart_details");
                });

            modelBuilder.Entity("Bookworm.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("customer_master");
                });

            modelBuilder.Entity("Bookworm.Models.CustomerRole", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id")
                        .HasColumnOrder(1);

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id")
                        .HasColumnOrder(2);

                    b.HasKey("CustomerId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("customer_roles");
                });

            modelBuilder.Entity("Bookworm.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("genre_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("genre_desc");

                    b.HasKey("Id");

                    b.ToTable("genre_master");
                });

            modelBuilder.Entity("Bookworm.Models.Invoice", b =>
                {
                    b.Property<long>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("InvoiceId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<int?>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.HasKey("InvoiceId");

                    b.HasIndex("CartId");

                    b.HasIndex("CustomerId");

                    b.ToTable("invoice_master");
                });

            modelBuilder.Entity("Bookworm.Models.InvoiceDetail", b =>
                {
                    b.Property<int>("InvDtlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("inv_dtl_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InvDtlId"));

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int?>("RentNoOfDays")
                        .HasColumnType("int")
                        .HasColumnName("rent_no_of_days");

                    b.Property<decimal>("RoyaltyAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("royalty_amount");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("sell_price");

                    b.Property<string>("TranType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tran_type");

                    b.HasKey("InvDtlId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("invoice_details");
                });

            modelBuilder.Entity("Bookworm.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("language_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("language_desc");

                    b.HasKey("Id");

                    b.ToTable("language_master");
                });

            modelBuilder.Entity("Bookworm.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("product_author");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("product_base_price");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("english_name");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("genre_id");

                    b.Property<string>("ImageSource")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("img_src");

                    b.Property<bool?>("IsRentable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_rentable");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("product_isbn");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("language_id");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("long_description");

                    b.Property<int?>("MinRentDays")
                        .HasColumnType("int")
                        .HasColumnName("min_rent_days");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("product_name");

                    b.Property<decimal?>("OfferPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("product_offer_price");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.Property<decimal?>("RentPerDay")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("rent_per_day");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("short_description");

                    b.Property<decimal?>("SpecialCost")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("product_sp_cost");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("Isbn")
                        .IsUnique();

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("product_master");
                });

            modelBuilder.Entity("Bookworm.Models.ProductBeneficiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_beneficiary_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeneficiaryId")
                        .HasColumnType("int")
                        .HasColumnName("beneficiary_id");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("percentage");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasKey("Id");

                    b.HasIndex("BeneficiaryId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_beneficiary");
                });

            modelBuilder.Entity("Bookworm.Models.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type_desc");

                    b.HasKey("Id");

                    b.ToTable("product_type_master");
                });

            modelBuilder.Entity("Bookworm.Models.RentalLedger", b =>
                {
                    b.Property<long>("UserLibraryId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_library_id");

                    b.Property<DateTime?>("LastStatusCheck")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_status_check");

                    b.Property<DateTime>("RentEndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("rent_end_date");

                    b.Property<DateTime>("RentStartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("rent_start_date");

                    b.HasKey("UserLibraryId");

                    b.ToTable("rental_ledger");
                });

            modelBuilder.Entity("Bookworm.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Bookworm.Models.RoyaltyCalculation", b =>
                {
                    b.Property<int>("RoyaltyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("royalty_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RoyaltyId"));

                    b.Property<int>("BeneficiaryId")
                        .HasColumnType("int")
                        .HasColumnName("beneficiary_id");

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<DateOnly>("RoyaltyDate")
                        .HasColumnType("date")
                        .HasColumnName("royalty_date");

                    b.Property<decimal>("RoyaltyOnSalesPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("royalty_on_sales_price");

                    b.Property<decimal>("SalesPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("sales_price");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("transaction_type");

                    b.HasKey("RoyaltyId");

                    b.HasIndex("BeneficiaryId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("royalty_calculation");
                });

            modelBuilder.Entity("Bookworm.Models.UserLibrary", b =>
                {
                    b.Property<long>("UserLibraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_library_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("UserLibraryId"));

                    b.Property<DateTime>("AcquisitionTimestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("acquisition_timestamp");

                    b.Property<string>("AcquisitionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("acquisition_type");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int>("InvoiceDetailId")
                        .HasColumnType("int")
                        .HasColumnName("invoice_detail_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.HasKey("UserLibraryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceDetailId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("user_library");
                });

            modelBuilder.Entity("Bookworm.Models.Cart", b =>
                {
                    b.HasOne("Bookworm.Models.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Bookworm.Models.CartDetail", b =>
                {
                    b.HasOne("Bookworm.Models.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookworm.Models.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Bookworm.Models.CustomerRole", b =>
                {
                    b.HasOne("Bookworm.Models.Customer", "Customer")
                        .WithMany("CustomerRoles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookworm.Models.Role", "Role")
                        .WithMany("CustomerRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Bookworm.Models.Invoice", b =>
                {
                    b.HasOne("Bookworm.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId");

                    b.HasOne("Bookworm.Models.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Bookworm.Models.InvoiceDetail", b =>
                {
                    b.HasOne("Bookworm.Models.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookworm.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Bookworm.Models.Product", b =>
                {
                    b.HasOne("Bookworm.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookworm.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookworm.Models.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Language");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Bookworm.Models.ProductBeneficiary", b =>
                {
                    b.HasOne("Bookworm.Models.BeneficiaryMaster", "Beneficiary")
                        .WithMany("ProductBeneficiaries")
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookworm.Models.Product", "Product")
                        .WithMany("ProductBeneficiaries")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beneficiary");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Bookworm.Models.RentalLedger", b =>
                {
                    b.HasOne("Bookworm.Models.UserLibrary", "UserLibrary")
                        .WithOne("RentalLedger")
                        .HasForeignKey("Bookworm.Models.RentalLedger", "UserLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLibrary");
                });

            modelBuilder.Entity("Bookworm.Models.RoyaltyCalculation", b =>
                {
                    b.HasOne("Bookworm.Models.BeneficiaryMaster", "Beneficiary")
                        .WithMany("RoyaltyCalculations")
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookworm.Models.Invoice", "Invoice")
                        .WithMany("RoyaltyCalculations")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookworm.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beneficiary");

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Bookworm.Models.UserLibrary", b =>
                {
                    b.HasOne("Bookworm.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookworm.Models.InvoiceDetail", "InvoiceDetail")
                        .WithOne("UserLibrary")
                        .HasForeignKey("Bookworm.Models.UserLibrary", "InvoiceDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookworm.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("InvoiceDetail");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Bookworm.Models.BeneficiaryMaster", b =>
                {
                    b.Navigation("ProductBeneficiaries");

                    b.Navigation("RoyaltyCalculations");
                });

            modelBuilder.Entity("Bookworm.Models.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("Bookworm.Models.Customer", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("CustomerRoles");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Bookworm.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("RoyaltyCalculations");
                });

            modelBuilder.Entity("Bookworm.Models.InvoiceDetail", b =>
                {
                    b.Navigation("UserLibrary")
                        .IsRequired();
                });

            modelBuilder.Entity("Bookworm.Models.Product", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("ProductBeneficiaries");
                });

            modelBuilder.Entity("Bookworm.Models.Role", b =>
                {
                    b.Navigation("CustomerRoles");
                });

            modelBuilder.Entity("Bookworm.Models.UserLibrary", b =>
                {
                    b.Navigation("RentalLedger")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
